# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  My\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/Entity/'
      - '../src/Kernel.php'
      - '../src/Tests/'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  My\Controller\:
    resource: '../src/Controller/'
    tags: [ 'controller.service_arguments' ]

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones

  My\Builder\PreparerCollection\DefaultPreparerCollection:
    arguments:
      - '@My\Builder\Preparer\SetterNameToFieldNamePreparer'

  My\Builder\Way\PublicFieldsWay:
    arguments:
      - !php/const My\Builder\Ways::PUBLIC_FIELDS
      - 2
      - '@My\Builder\PreparerCollection\DefaultPreparerCollection'

  My\Builder\Way\ConstructorWay:
    arguments:
      - !php/const My\Builder\Ways::CONSTRUCTOR
      - 1
      - '@My\Builder\PreparerCollection\DefaultPreparerCollection'

  My\Builder\Way\SetterWay:
    arguments:
      - !php/const My\Builder\Ways::SETTERS
      - 3

  My\Builder\Way\ReflectionWay:
    arguments:
      - !php/const My\Builder\Ways::REFLECTION
      - 4
      - '@My\Builder\PreparerCollection\DefaultPreparerCollection'

  My\Builder\Manager\DefaultBuildManager:
    arguments:
      - - '@My\Builder\Way\ConstructorWay'
        - '@My\Builder\Way\PublicFieldsWay'
        - '@My\Builder\Way\SetterWay'
        - '@My\Builder\Way\ReflectionWay'

  my.model_builder.task:
    class: My\Builder\Builder
    factory:
      - '@My\Builder\Manager\DefaultBuildManager'
      - 'createBuilder'
    arguments:
      - My\Model\Data\Task

  My\Controller\DefaultController:
    tags: [ controller.service_arguments ]
    bind:
      $taskBuilder: '@my.model_builder.task'

  My\Listener\ViewListener:
    tags:
      - { name: kernel.event_listener, event: kernel.view }
